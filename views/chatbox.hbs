<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI健康顾问 - Health Pro</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --input-bg: #1a1d28;
            --input-text: #e3e4e8;
            --send-btn: #667eea;
            --user-bubble: #667eea;
            --bot-bubble: #2d3343;
        }

        body {
            background: #0f1117;
            min-height: 100vh;
            color: #e3e4e8;
        }

        .chat-container {
            max-width: 800px;
            height: 90vh;
            margin: 2rem auto;
            border-radius: 1.5rem;
            overflow: hidden;
            background: #151821;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            background: var(--primary-gradient);
            color: white;
            padding: 1.5rem;
            text-align: center;
            flex-shrink: 0;
        }

        #chat-history {
            flex-grow: 1;
            padding: 1.5rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .message-container {
            display: flex;
            margin-bottom: 1.5rem;
            gap: 12px;
        }

        .user-message {
            justify-content: flex-end;
        }

        .message-bubble {
            max-width: 70%;
            padding: 1rem 1.25rem;
            border-radius: 1.25rem;
            animation: messageAppear 0.3s ease;
            line-height: 1.6;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }

        .user-bubble {
            background: var(--user-bubble);
            color: white;
            border-radius: 1.25rem 1.25rem 0 1.25rem;
        }

        .bot-bubble {
            background: var(--bot-bubble);
            color: white;
            border-radius: 1.25rem 1.25rem 1.25rem 0;
            position: relative;

        }


        .bot-bubble .markdown-content h1,
        .bot-bubble .markdown-content h2,
        .bot-bubble .markdown-content h3 {
            color: #ffffff; /* Title color */
            margin-top: 1.5rem;
            margin-bottom: 0.8rem;
            padding-bottom: 0.3rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 1.2rem; /* Adjust size */
        }
        .bot-bubble .markdown-content h1:first-child,
        .bot-bubble .markdown-content h2:first-child,
        .bot-bubble .markdown-content h3:first-child {
            margin-top: 0.5rem;
        }

        .bot-bubble .markdown-content p {
            margin-bottom: 0.8rem;
            color: #e3e4e8;
        }

        .bot-bubble .markdown-content ul,
        .bot-bubble .markdown-content ol {
            margin-bottom: 0.8rem;
            padding-left: 25px;
            color: #e3e4e8;
        }

        .bot-bubble .markdown-content li {
            margin-bottom: 0.5rem;
        }

        .bot-bubble .markdown-content strong,
        .bot-bubble .markdown-content b {
            color: #ffffff;
        }

        .bot-bubble .markdown-content em,
        .bot-bubble .markdown-content i {
            color: #cccccc;
        }

        .bot-bubble .markdown-content blockquote {
            border-left: 4px solid rgba(255, 255, 255, 0.2);
            padding-left: 1rem;
            margin-left: 0;
            font-style: italic;
            color: #cccccc;
            margin-bottom: 0.8rem;
        }

        .bot-bubble .markdown-content pre,
        .bot-bubble .markdown-content code {
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            padding: 0.2rem 0.4rem;
            font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
            font-size: 0.9rem;
            color: #ffffff;
            overflow-x: auto;
        }

        .bot-bubble .markdown-content pre {
            display: block;
            padding: 1rem;
            margin-bottom: 0.8rem;
        }


        .input-container {
            padding: 1.5rem;
            background: var(--input-bg);
            border-top: 1px solid #2d3343;
            flex-shrink: 0;
        }

        #user-input {
            background: var(--input-bg) !important;
            color: var(--input-text) !important;
            border: 1px solid #2d3343 !important;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            transition: all 0.3s ease;
            resize: none;
            min-height: 48px;
            overflow-y: hidden;
        }

        #user-input:focus {
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
            border-color: #667eea !important;
        }

        #send-button {
            background: var(--send-btn);
            border: none;
            border-radius: 12px;
            width: 48px;
            height: 48px;
            transition: all 0.3s ease;
            flex-shrink: 0;
        }

        #send-button:hover:not(:disabled) {
            transform: scale(1.05);
            background: #7662e5;
        }
        #send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }


        @keyframes messageAppear {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* 暗色滚动条 */
        #chat-history::-webkit-scrollbar {
            width: 8px;
        }

        #chat-history::-webkit-scrollbar-track {
            background: #1a1d28;
        }

        #chat-history::-webkit-scrollbar-thumb {
            background: #2d3343;
            border-radius: 4px;
        }

        .example-badge {
            transition: all 0.3s ease;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .example-badge:hover {
            transform: translateY(-2px);
            background: #2d3343 !important;
        }
        .example-badge:active {
            transform: translateY(0);
        }

        /* Typing indicator styles */
        .typing-indicator .message-bubble {
            min-height: 40px; /* Placeholder height */
            background: #2d3343;
            display: flex;
            align-items: center;
        }

        .typing-indicator .dot {
            width: 8px;
            height: 8px;
            margin: 0 4px;
            background-color: rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            display: inline-block;
            animation: bounce 1s infinite ease-in-out both;
        }

        .typing-indicator .dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-indicator .dot:nth-child(2) { animation-delay: -0.16s; }
        .typing-indicator .dot:nth-child(3) { animation-delay: 0s; }

        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }


    </style>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark" style="background: var(--primary-gradient)">
    <div class="container">
        <a class="navbar-brand" href="/home">
            <i class="fas fa-heartbeat me-2"></i>Health Pro
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-end" id="mainNav">
            <div class="navbar-nav align-items-center">
                {{#if user}}
                    <span class="nav-item navbar-text d-none d-lg-block me-3">
                        <i class="fas fa-user-circle me-2"></i>{{user.username}}
                    </span>
                    <a href="/logout" class="nav-link btn btn-outline-light">
                        <i class="fas fa-sign-out-alt me-2"></i>退出
                    </a>
                {{else}}

                {{/if}}
            </div>
        </div>
    </div>
</nav>

<div class="chat-container">
    <div class="chat-header">
        <h4 class="mb-1"><i class="fas fa-robot me-2"></i>AI Health Consultant</h4>
        <small class="opacity-75">Provide health reference suggestions based on general information</small>
    </div>

    <div id="chat-history">

    </div>

    <div class="input-container">
        <div class="input-group gap-2">
            <input type="text"
                   id="user-input"
                   class="form-control"
                   placeholder="Enter a health concern (eg: how to improve sleep quality)"
                   aria-label="Health consultation input box">
            <button id="send-button" class="btn d-flex align-items-center justify-content-center">
                <i class="fas fa-paper-plane text-white"></i>
            </button>
        </div>

        <div class="mt-3 text-center">
            <div class="d-flex flex-wrap gap-2 justify-content-center">
                <button class="example-badge badge bg-dark text-white border-0 py-2 px-3"
                        onclick="insertExample('Recommend an exercise plan that suits me')">
                    <i class="fas fa-running me-2"></i>Exercise Tips
                </button>
                <button class="example-badge badge bg-dark text-white border-0 py-2 px-3"
                        onclick="insertExample('How to control blood sugar')">
                    <i class="fas fa-apple-alt me-2"></i>Diet management
                </button>
                <button class="example-badge badge bg-dark text-white border-0 py-2 px-3"
                        onclick="insertExample('Ways to improve your sleep')">
                    <i class="fas fa-moon me-2"></i>Improved sleep
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    const chatHistory = document.getElementById('chat-history');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');


    function addMessage(content, isUser) {
        const messageContainer = document.createElement('div');
        messageContainer.className = `message-container ${isUser ? 'user-message' : ''}`;

        const bubble = document.createElement('div');
        bubble.className = `message-bubble ${isUser ? 'user-bubble' : 'bot-bubble'}`;

        if (!isUser) {
            // For AI messages (bot-bubble)
            // Add the bot icon
            const icon = document.createElement('i');
            icon.className = "fas fa-robot me-2 opacity-75";
            bubble.appendChild(icon);

            // Create a container specifically for the Markdown-rendered content (HTML from backend)
            const markdownContentDiv = document.createElement('div');
            markdownContentDiv.classList.add('markdown-content'); // Add a class for styling

            // *** MODIFICATION: Backend now sends HTML, so use innerHTML ***
            // Use innerHTML to render the HTML received from the backend
            // NOTE: Using innerHTML with external content carries a theoretical XSS risk.
            // Ensure you trust the backend's HTML generation (which uses marked.js).
            markdownContentDiv.innerHTML = content;

            bubble.appendChild(markdownContentDiv);

        } else {
            // For user messages (user-bubble)
            // *** MODIFICATION: Always use textContent for user input for safety ***
            // Use textContent for safety to prevent any user-injected HTML/JS execution
            bubble.textContent = content;
        }

        messageContainer.appendChild(bubble);
        chatHistory.appendChild(messageContainer);

        // Scroll to the latest message smoothly
        chatHistory.scrollTo({
            top: chatHistory.scrollHeight,
            behavior: 'smooth'
        });
    }

    // Function to add a typing indicator
    function addTypingIndicator() {
        // *** NEW FUNCTION: Add a visual indicator while waiting for AI ***
        const existingIndicator = document.getElementById('typing-indicator');
        if (existingIndicator) return; // Prevent adding multiple indicators

        const typingIndicatorContainer = document.createElement('div');
        typingIndicatorContainer.className = 'message-container typing-indicator';
        typingIndicatorContainer.id = 'typing-indicator'; // Add an ID to easily remove it

        const bubble = document.createElement('div');
        bubble.className = 'message-bubble bot-bubble'; // Use bot-bubble style

        bubble.innerHTML = `
            <i class="fas fa-robot me-2 opacity-75"></i>
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        `;

        typingIndicatorContainer.appendChild(bubble);
        chatHistory.appendChild(typingIndicatorContainer);

        // Scroll to show the indicator
        chatHistory.scrollTo({
            top: chatHistory.scrollHeight,
            behavior: 'smooth'
        });
    }

    // Function to remove the typing indicator
    function removeTypingIndicator() {
        // *** NEW FUNCTION: Remove the typing indicator ***
        const indicator = document.getElementById('typing-indicator');
        if (indicator) {
            indicator.remove();
        }
    }


    // Function to send message
    async function sendMessage() {
        const userMessage = userInput.value.trim();
        if (!userMessage) return;

        // Display user message
        addMessage(userMessage, true);
        userInput.value = '';
        // Temporarily disable input and button while waiting for AI
        userInput.disabled = true;
        sendButton.disabled = true;

        // Add typing indicator
        addTypingIndicator();


        try {
            // Send POST request to your backend /chatbox/send endpoint
            const response = await fetch('/chatbox/send', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: userMessage })
            });

            const data = await response.json();

            // *** MODIFICATION: Always remove typing indicator in finally block ***
            // removeTypingIndicator(); // Removed from here, moved to finally

            if (data.error) {
                // If backend returned an error
                addMessage(`<span class="text-danger">Wrong: ${data.error}</span>`, false);
            } else {
                // *** MODIFICATION: data.reply is now HTML (parsed on backend) ***
                const aiReplyHtml = data.reply; // Backend sends HTML directly

                // Display AI reply (passing HTML to addMessage)
                // addMessage function handles inserting this HTML safely
                addMessage(aiReplyHtml, false);
            }

        } catch (error) {
            console.error('发送消息失败:', error);

            addMessage('<span class="text-danger">Sorry, failed to get the response. Please try again later。</span>', false);
        } finally {

            removeTypingIndicator(); // Remove typing indicator
            userInput.disabled = false; // Re-enable input
            sendButton.disabled = false; // Re-enable button
            userInput.focus(); // Focus input box for next message
        }
    }

    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) { // Send on Enter, prevent Shift+Enter for newline
            e.preventDefault();
            sendMessage();
        }
    });

    function insertExample(text) {
        userInput.value = text;
        userInput.focus();
    }


    addMessage('Hello! I am your AI health consultant. How can I help you?', false);



</script>
</body>
</html>